// Generated by CoffeeScript 1.6.2
(function() {
  var args, buildHtmlPath, extractSet, file, fs, handle, handlebars, isBuildPath, isCommand, parse, parsed, sanitizePaths, sanitizeResults, _i, _len, _ref;

  fs = require('fs');

  handlebars = require('./handlebars-v2.0.0.js');

  args = process.argv.slice(2);

  isCommand = function(arg) {
    return arg.lastIndexOf("--", 0) === 0;
  };

  isBuildPath = function(path) {
    return path.lastIndexOf('build/', 0) === 0;
  };

  extractSet = function(args, index, results) {
    var command, set;

    command = args[index].substring(2);
    if (!isCommand(args[index])) {
      throw "Unexpected argument: " + args[index];
    }
    index++;
    set = [];
    while (index < args.length && !isCommand(args[index])) {
      set.push(args[index]);
      index++;
    }
    results[command] = set;
    return index;
  };

  sanitizePaths = function(paths) {
    var path, _i, _len, _results;

    if (paths == null) {
      return [];
    }
    _results = [];
    for (_i = 0, _len = paths.length; _i < _len; _i++) {
      path = paths[_i];
      if (!isBuildPath(path)) {
        throw "Disallowed file path: " + path;
      }
      _results.push(path.substring(6));
    }
    return _results;
  };

  sanitizeResults = function(results, field) {
    return results[field] = sanitizePaths(results[field]);
  };

  parse = function(args) {
    var index, results;

    results = {};
    index = 0;
    while (index < args.length) {
      index = extractSet(args, index, results);
    }
    if (results.html === void 0) {
      throw "No html files specified to build.";
    }
    sanitizeResults(results, 'stylesheets');
    sanitizeResults(results, 'externals');
    sanitizeResults(results, 'schedules');
    sanitizeResults(results, 'sources');
    results.sources.sort(function(a, b) {
      if (a === "Templates.js") {
        return -1;
      }
      if (b === "Templates.js") {
        return 1;
      }
      if (a < b) {
        return -1;
      }
      if (a > b) {
        return 1;
      }
      return 0;
    });
    return results;
  };

  buildHtmlPath = function(path) {
    var name;

    name = path.substring(path.lastIndexOf('/') + 1, path.length - 11);
    return "build/" + name + ".html";
  };

  handle = function(path, info) {
    return fs.readFile(path, 'utf-8', function(err, text) {
      var outPath, template;

      if (err) {
        throw err;
      }
      template = handlebars.compile(text);
      outPath = buildHtmlPath(path);
      return fs.writeFile(outPath, template(info), function(err) {
        if (err) {
          throw err;
        }
        return console.log('HTML Written: ' + outPath);
      });
    });
  };

  parsed = parse(args);

  _ref = parsed.html;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    file = _ref[_i];
    handle(file, parsed);
  }

}).call(this);
